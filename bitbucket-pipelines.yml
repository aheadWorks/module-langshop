definitions:
  scripts:
    clean_source: &cleanSource |-
      rm -rf .hgignore bitbucket-pipelines.yml .hg .git .gitignore
    clean_test_results: &cleanTestResults |-
      rm -rf test-results
    pack_zip: &packZip |-
      echo "Will create ${BITBUCKET_REPO_SLUG}.zip"
      zip -r ${BITBUCKET_REPO_SLUG}.zip .
    prepare_env: &prepareEnv |-
      # Do we build a hyva module?
      case "$BITBUCKET_REPO_SLUG" in
        *hyva) export IS_HYVA=1 ;;
        *)     export IS_HYVA=0 ;;
      esac
      echo "Hyva flag: $IS_HYVA"
    prepare_ssh: &prepareSSH |-
      # change way to get access of our modules to composer from ssh keys to composer keys
      mkdir -p ~/.ssh
      (umask  077; echo ${AWM2EXT_SSH_KEY} | base64 -di > ~/.ssh/id_rsa)
      chmod 700 ~/.ssh
      echo ${AW_COMPOSER_KNOWN_HOSTS} >> ~/.ssh/known_hosts
      ssh-keyscan -t rsa bitbucket.org >> ~/.ssh/known_hosts

      # Hyva access
      if [ "$IS_HYVA" -eq 1 ]; then
        echo -e "${HYVA_KEY}" > ~/.ssh/id_rsa_hyva
        chmod 600  ~/.ssh/id_rsa_hyva
        echo -e "Host hyva-repo\nHostName gitlab.hyva.io\nUser git\nIdentityFile ~/.ssh/id_rsa_hyva\nIdentitiesOnly yes" >> ~/.ssh/config
        cat ~/.ssh/config
        ssh-keyscan -H gitlab.hyva.io >> ~/.ssh/known_hosts
      fi
    install_lib: &installLib |-
      pip3 install --break-system-packages aheadworks-deploy-manager
      # Installing additional Hyva modules
      echo "Hyva flag: $IS_HYVA"
      if [ "$IS_HYVA" -eq 1 ]; then
        oldpath=`pwd`
        cd /var/www/html
        apk add --update --no-cache nodejs npm openssh-client
        composer config repositories.hyva-themes/magento2-theme-module git hyva-repo:hyva-themes/magento2-theme-module.git
        composer config repositories.hyva-themes/magento2-reset-theme git hyva-repo:hyva-themes/magento2-reset-theme.git
        composer config repositories.hyva-themes/magento2-email-module git hyva-repo:hyva-themes/magento2-email-module.git
        composer config repositories.hyva-themes/magento2-default-theme git hyva-repo:hyva-themes/magento2-default-theme.git
        composer config repositories.hyva-themes/magento2-mollie-theme-bundle git hyva-repo:hyva-themes/hyva-compat/magento2-mollie-theme-bundle.git
        composer config repositories.hyva-themes/magento2-compat-module-fallback git hyva-repo:hyva-themes/magento2-compat-module-fallback.git
        composer config repositories.hyva-themes/magento2-theme-fallback git hyva-repo:hyva-themes/magento2-theme-fallback.git
        composer config repositories.hyva-themes/hyva-checkout git hyva-repo:hyva-checkout/checkout.git

        COMPOSER_MEMORY_LIMIT=-1 composer require --prefer-source hyva-themes/magento2-mollie-theme-bundle
        COMPOSER_MEMORY_LIMIT=-1 composer require --prefer-source hyva-themes/magento2-theme-module:^1.3.11
        COMPOSER_MEMORY_LIMIT=-1 composer require --prefer-source hyva-themes/magento2-default-theme
        COMPOSER_MEMORY_LIMIT=-1 composer require hyva-themes/magento2-compat-module-fallback
        COMPOSER_MEMORY_LIMIT=-1 composer require --prefer-source hyva-themes/magento2-hyva-checkout:^1.3.2
        COMPOSER_MEMORY_LIMIT=-1 composer require --prefer-source hyva-themes/magento2-theme-fallback
        cd $oldpath
      fi
    uct_validate: &uctValidate |-
      apk add --no-cache jq
      UCT_CRITICAL=`cat ${BUILD_DIR}/test-results/uct-2.4.8.json| jq -- '.stats.critical'`
      UCT_ERRORS=`cat   ${BUILD_DIR}/test-results/uct-2.4.8.json| jq -- '.stats.errors'`
      UCT_WARNINGS=`cat ${BUILD_DIR}/test-results/uct-2.4.8.json| jq -- '.stats.warnings'`
      case ${UCT_ISSUE_LEVEL:-'critical'} in
        "critical")
          if [ "$UCT_CRITICAL" -gt 0 ]; then echo "$UCT_CRITICAL Critical issue(s) found"; exit 1; fi
          ;;
        "error")
          if [ "$UCT_CRITICAL" -gt 0 ] || [ "$UCT_ERRORS" -gt 0 ]; then echo "$UCT_CRITICAL Critical issue(s) and $UCT_ERRORS Error issue(s) found "; exit 1; fi
          ;;

        "warning")
          if [ "$UCT_CRITICAL" -gt 0 ] || [ "$UCT_ERRORS" -gt 0 ] || [ "$UCT_WARNINGS" -gt 0 ]; then echo "$UCT_CRITICAL Critical issue(s) and $UCT_ERRORS Error and $UCT_WARNINGS warnings. issue(s) found "; exit 1; fi
          ;;

        *)
          echo "Unknown UCT_ISSUE_LEVEL: '$UCT_ISSUE_LEVEL' - only 'critical', 'error' and 'warning' are allowed"
          ;;
      esac

  build_steps:
    - step: &build
        image: atlassian/default-image:2
        name: Clean and pack sources
        script:
          - *cleanSource
          - *packZip
        artifacts:
          - "*.zip"

  test_steps:
# Magento 2.4.8 tests
    - step: &codesnifferTestPHP84-2.4.8
        name: codesniffer tests PHP 8.4 on Magento 2.4.8
        image: aheadworks/m2test-new:2.4.8-without-db-8.4
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager codesniffer ${PWD} test-results/codesniffer-2.4.8.xml
        artifacts:
          - "test-results/**"

    - step: &unitTestPHP84-2.4.8
        name: unit tests PHP 8.4 on Magento 2.4.8
        image: aheadworks/m2test-new:2.4.8-with-db-8.4
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - if [ "$IS_HYVA" -eq 0 ]; then python3 -m aheadworks_test_manager unit ${PWD} test-results/test-unit-2.4.8.xml; else echo "Hyva extension. Unit tests are skipped by design."; fi;
        artifacts:
          - "test-results/**"

    - step: &phpstanTestPHP84-2.4.8
        name: phpstan tests PHP 8.4 on Magento 2.4.8
        image: aheadworks/m2test-new:2.4.8-with-db-8.4
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager phpstan ${PWD} test-results/test-phpstan-2.4.8.xml
        artifacts:
          - "test-results/**"

    - step: &installMagentoPHP84-2.4.8
        name: install Magento 2.4.8 test
        image: aheadworks/m2test-new:2.4.8-without-db-8.4
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager install-magento ${PWD} test-results/install-test-2.4.8.xml
        artifacts:
          - "logs1/**"
          - "test-results/**"

    - step: &UCT-PHP83-2.4.8
        name: Upgrade Compatibility Tool 2.4.8 test
        image: aheadworks/deploy-tools:new-gen
        script:
          - export BUILD_DIR=$PWD
          - cd /root
          - composer create-project magento/upgrade-compatibility-tool uct --repository https://repo.magento.com
          - chmod +x uct/bin/uct
          - uct/bin/uct upgrade:check --current-version=2.4.7-p3 --coming-version=2.4.8 --json-output-path=${BUILD_DIR}/test-results/uct-2.4.8.json --html-output-path=${BUILD_DIR}/test-results/uct-2.4.8.html --min-issue-level=${UCT_ISSUE_LEVEL:-'critical'} -- ${BUILD_DIR}
          - *uctValidate
        artifacts:
          - "logs1/**"
          - "test-results/**"

# Magento 2.4.7 tests
    - step: &codesnifferTestPHP83-2.4.7
        name: codesniffer tests on Magento 2.4.7
        image: aheadworks/m2test-new:2.4.7-p5-without-db-8.3
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager codesniffer ${PWD} test-results/codesniffer-2.4.7.xml
        artifacts:
          - "test-results/**"

    - step: &unitTestPHP83-2.4.7
        name: unit tests PHP 8.3 on Magento 2.4.7
        image: aheadworks/m2test-new:2.4.7-p5-with-db-8.3
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - if [ "$IS_HYVA" -eq 0 ]; then python3 -m aheadworks_test_manager unit ${PWD} test-results/test-unit-2.4.7.xml; else echo "Hyva extension. Unit tests are skipped by design."; fi;
        artifacts:
          - "test-results/**"

    - step: &phpstanTestPHP83-2.4.7
        name: phpstan tests PHP 8.3 on Magento 2.4.7
        image: aheadworks/m2test-new:2.4.7-p5-with-db-8.3
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager phpstan ${PWD} test-results/test-phpstan-2.4.7.xml
        artifacts:
          - "test-results/**"

    - step: &installMagentoPHP83-2.4.7
        name: install Magento 2.4.7 test
        image: aheadworks/m2test-new:2.4.7-p5-without-db-8.3
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager install-magento ${PWD} test-results/install-test-2.4.7.xml
        artifacts:
          - "logs1/**"
          - "test-results/**"

# Magento 2.4.6 tests
    - step: &messDetectorTestPHP82-2.4.6
        name: mess detector tests PHP 8.2
        image: aheadworks/m2test-new:2.4.6-p10-with-db-8.2
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager mess-detector ${PWD}
        artifacts:
          - "test-results/**"

    - step: &codesnifferTestPHP82-2.4.6
        name: codesniffer tests on Magento 2.4.6
        image: aheadworks/m2test-new:2.4.6-p10-without-db-8.2
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager codesniffer ${PWD} test-results/codesniffer-2.4.6.xml
        artifacts:
          - "test-results/**"

    - step: &unitTestPHP82-2.4.6
        name: unit tests PHP 8.2 on Magento 2.4.6
        image: aheadworks/m2test-new:2.4.6-p10-with-db-8.2
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - if [ "$IS_HYVA" -eq 0 ]; then python3 -m aheadworks_test_manager unit ${PWD} test-results/test-unit-2.4.6.xml; else echo "Hyva extension. Unit tests are skipped by design."; fi;
        artifacts:
          - "test-results/**"

    - step: &phpstanTestPHP82-2.4.6
        name: phpstan tests PHP 8.2 on Magento 2.4.6
        image: aheadworks/m2test-new:2.4.6-p10-with-db-8.2
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager phpstan ${PWD} test-results/test-phpstan-2.4.6.xml
        artifacts:
          - "test-results/**"

    - step: &installMagentoPHP82-2.4.6
        name: install Magento 2.4.6 test
        image: aheadworks/m2test-new:2.4.6-p10-without-db-8.2
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager install-magento ${PWD} test-results/test-unit.xml
        artifacts:
          - "logs1/**"
          - "test-results/test-unit.xml"

# Magento 2.4.5 tests
    - step: &unitTestPHP81-2.4.5
        name: unit tests PHP 8.1 on Magento 2.4.5
        image: aheadworks/m2test-new:2.4.5-p12-with-db-8.1
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - if [ "$IS_HYVA" -eq 0 ]; then python3 -m aheadworks_test_manager unit ${PWD} test-results/test-unit-2.4.5.xml; else echo "Hyva extension. Unit tests are skipped by design."; fi;
        artifacts:
          - "test-results/**"

    - step: &phpstanTestPHP81-2.4.5
        name: phpstan tests PHP 8.1 on Magento 2.4.5
        image: aheadworks/m2test-new:2.4.5-p12-with-db-8.1
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager phpstan ${PWD} test-results/test-phpstan-2.4.5.xml
        artifacts:
          - "test-results/**"

    - step: &installMagentoPHP81-2.4.5
        name: install Magento 2.4.5 test
        image: aheadworks/m2test-new:2.4.5-p12-without-db-8.1
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_test_manager install-magento ${PWD} test-results/test-unit.xml
        artifacts:
          - "logs1/**"
          - "test-results/test-unit.xml"

  deployment_steps:
    - step: &rebuildPrivateComposer
        name: Sync tags and branches to the Internal composer
        image: aheadworks/deploy-tools:new-gen
        script:
          - *prepareEnv
          - *prepareSSH
          - *cleanTestResults
          - *installLib
          - python3 -m aheadworks_bitbucket_manager internal_composer_refresh
    - step: &releaseToPublicComposer
        name: Add the new package to the Public composer repository
        image: aheadworks/deploy
        username: ${DOCKERHUB_LOGIN}
        password: ${DOCKERHUB_PASSWORD}
        script:
          - *prepareEnv
          - *prepareSSH
          - *cleanTestResults
          - *prepareSSH
          - VERSION=$(cat composer.json | jq -r '.version') && NAME=$(cat composer.json | jq -r '.name')
          - test -f ${BITBUCKET_REPO_SLUG}.zip
          - echo "Ready to push ${NAME}-${VERSION} to ${AW_COMPOSER_API_URL}"
          - ssh -t ${AW_COMPOSER_SSH_URL} "mkdir -p ${AW_COMPOSER_PACKAGES_ROOT}/${NAME}"
          - scp ${BITBUCKET_REPO_SLUG}.zip ${AW_COMPOSER_SSH_URL}:${AW_COMPOSER_PACKAGES_ROOT}/${NAME}/${BITBUCKET_REPO_SLUG}-${VERSION}.zip
          - REPO_URL=${AW_COMPOSER_API_URL} REPO_LOGIN=${AW_COMPOSER_API_LOGIN} REPO_TOKEN=${AW_COMPOSER_API_PASSWORD} deploy comp -p send-package --filename=${BITBUCKET_REPO_SLUG}-${VERSION}.zip ${BITBUCKET_REPO_SLUG}.zip
    - step: &build_packages
        name: Build store and marketplace packages and send them to Teamwork
        image: aheadworks/deploy-tools:new-gen
        script:
          - *prepareEnv
          - *prepareSSH
          - *installLib
          - python3 -m aheadworks_release_manager build-ecommerce-pack --bitbucket_workspace=${BITBUCKET_WORKSPACE} --bitbucket_repo_slug=${BITBUCKET_REPO_SLUG}
          - python3 -m aheadworks_release_manager build-mm-pack
          - if [[ "$BITBUCKET_REPO_SLUG" == "module-test" ]]; then DISCORD_BOT_URL=${TEST_DISCORD_MAGENTO_RELEASE_BOT_URL}; else DISCORD_BOT_URL=${DISCORD_MAGENTO_RELEASE_BOT_URL}; fi;
          - python3 -m aheadworks_release_manager teamwork-release --jira_project_key="${JIRA_PROJECT_KEY}" --composer-file="./composer.json" --discord-bot-url="${DISCORD_BOT_URL}" --path_to_files="/build_archives" --assign_to="${AFTER_RELEASE_ASSIGNEE_TEAMWORK}"
        artifacts:
            - "/build_archives/**"
    - step: &swaggerWebApiDocBuild
        name: Build Web Api Documentation and publish it at S3
        image: aheadworks/deploy-tools:swagger
        script:
          - *prepareEnv
          - *prepareSSH
          - git -C /tmp clone https://x-token-auth:$SWAGGER_ACCESS_TOKEN@bitbucket.org/awimpl/magento-swagger-web-api-generator.git
          - cp -r /tmp/magento-swagger-web-api-generator/* /var/www/html/pub
          - *installLib
          - mkdir -p ~/.aws/
          - echo '[default]' >  ~/.aws/credentials
          - echo "aws_access_key_id = $SWAGGER_AWS_ACCESS_KEY_ID" >>  ~/.aws/credentials
          - echo "aws_secret_access_key = $SWAGGER_AWS_SECRET_ACCESS_KEY" >>  ~/.aws/credentials
          - python3 -m aheadworks_release_manager build-swagger-web-api-doc --path-to-module=./ --magento_url=http://localhost

pipelines:
  tags:
    '*.*.*':
      - step: *rebuildPrivateComposer
  branches:
    # For commits to master branch: run full set of tests
    master:
      - step: *build
      - parallel:
          - step: *codesnifferTestPHP82-2.4.6
          - step: *unitTestPHP82-2.4.6
          - step: *installMagentoPHP82-2.4.6
          - step: *phpstanTestPHP82-2.4.6
          - step: *unitTestPHP81-2.4.5
          - step: *phpstanTestPHP81-2.4.5
          - step: *installMagentoPHP81-2.4.5
      - step: *rebuildPrivateComposer
      - step: *build_packages
      - step: *swaggerWebApiDocBuild
      - step: *releaseToPublicComposer

    # For every commit to develop branch: run tests
    develop:
      - parallel:
          - step: *UCT-PHP83-2.4.8
          - step: *codesnifferTestPHP84-2.4.8
          - step: *unitTestPHP84-2.4.8
          - step: *phpstanTestPHP84-2.4.8
          - step: *installMagentoPHP84-2.4.8
          - step: *codesnifferTestPHP83-2.4.7
          - step: *unitTestPHP83-2.4.7
          - step: *phpstanTestPHP83-2.4.7
          - step: *installMagentoPHP83-2.4.7
          - step: *codesnifferTestPHP82-2.4.6
          - step: *unitTestPHP82-2.4.6
          - step: *installMagentoPHP82-2.4.6
          - step: *phpstanTestPHP82-2.4.6
          - step: *unitTestPHP81-2.4.5
          - step: *phpstanTestPHP81-2.4.5
          - step: *installMagentoPHP81-2.4.5
          
      - step: *rebuildPrivateComposer
    feature/*:
      - parallel:
        - step: *codesnifferTestPHP82-2.4.6
        - step: *unitTestPHP82-2.4.6
        - step: *phpstanTestPHP82-2.4.6
        - step: *phpstanTestPHP81-2.4.5

    bugfix/*:
      - parallel:
        - step: *unitTestPHP83-2.4.7
        - step: *codesnifferTestPHP82-2.4.6
        - step: *unitTestPHP82-2.4.6
        - step: *phpstanTestPHP82-2.4.6
        - step: *phpstanTestPHP81-2.4.5

    release/*:
      - step: *build
      - parallel:
          - step: *UCT-PHP83-2.4.8
          - step: *unitTestPHP83-2.4.7
          - step: *codesnifferTestPHP82-2.4.6
          - step: *unitTestPHP82-2.4.6
          - step: *phpstanTestPHP82-2.4.6
          - step: *unitTestPHP81-2.4.5
          - step: *phpstanTestPHP81-2.4.5

  custom:
    # Manual upload to the Public composer repository
    release-to-public-composer:
      - step: *build
      - step: *releaseToPublicComposer

    # Manual resync of tags and branches for Internal composer repo
    rebuild-private-composer:
      - step: *rebuildPrivateComposer

    # Build pack manually
    build-marketplace-package:
      - step: *build

    # Run tests manually
    run-all-tests:
      - parallel:
          - step: *codesnifferTestPHP82-2.4.6
          - step: *unitTestPHP82-2.4.6
          - step: *phpstanTestPHP82-2.4.6
          - step: *messDetectorTestPHP82-2.4.6
          - step: *installMagentoPHP82-2.4.6
          - step: *phpstanTestPHP81-2.4.5
          - step: *unitTestPHP81-2.4.5
          - step: *installMagentoPHP81-2.4.5
          - step: *UCT-PHP83-2.4.8

    # Run prerelease tests manually
    run-prerelease-tests:
      - parallel:
          - step: *codesnifferTestPHP82-2.4.6
          - step: *unitTestPHP82-2.4.6
          - step: *installMagentoPHP82-2.4.6
          - step: *unitTestPHP81-2.4.5
          - step: *installMagentoPHP81-2.4.5

    #prepare build
    build_packages:
      - step: *build_packages

    # Manually rebuild Web Api Documentation and publish it at S3
    swagger-web-api-doc-build:
      - step: *swaggerWebApiDocBuild

    # copy this file to all modules

    codesniffer-test-with-select-severity:
      - variables:
          - name: SEVERITY
            default: 9
      - step: *codesnifferTestPHP82-2.4.6

    phpstan-test-with-select-severity:
      - variables:
          - name: PHPSTANSEVERITY
            default: 0
      - parallel:
          - step: *phpstanTestPHP81-2.4.5
          - step: *phpstanTestPHP82-2.4.6

    mess-detector-test:
      - step: *messDetectorTestPHP82-2.4.6
